"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = getAssignmentIdentifiers;

function getAssignmentIdentifiers(node) {
  var search = [].concat(node);
  var ids = Object.create(null);

  while (search.length) {
    var id = search.pop();
    if (!id) continue;

    switch (id.type) {
      case "ArrayPattern":
        search.push.apply(search, _toConsumableArray(id.elements));
        break;

      case "AssignmentExpression":
      case "AssignmentPattern":
      case "ForInStatement":
      case "ForOfStatement":
        search.push(id.left);
        break;

      case "ObjectPattern":
        search.push.apply(search, _toConsumableArray(id.properties));
        break;

      case "ObjectProperty":
        search.push(id.value);
        break;

      case "RestElement":
      case "UpdateExpression":
        search.push(id.argument);
        break;

      case "UnaryExpression":
        if (id.operator === "delete") {
          search.push(id.argument);
        }

        break;

      case "Identifier":
        ids[id.name] = id;
        break;

      default:
        break;
    }
  }

  return ids;
}