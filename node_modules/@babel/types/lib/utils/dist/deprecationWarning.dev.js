"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = deprecationWarning;
var warnings = new Set();

function deprecationWarning(oldName, newName) {
  var prefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";
  if (warnings.has(oldName)) return;
  warnings.add(oldName);

  var _captureShortStackTra = captureShortStackTrace(1, 2),
      internal = _captureShortStackTra.internal,
      trace = _captureShortStackTra.trace;

  if (internal) {
    return;
  }

  console.warn("".concat(prefix, "`").concat(oldName, "` has been deprecated, please migrate to `").concat(newName, "`\n").concat(trace));
}

function captureShortStackTrace(skip, length) {
  var stackTraceLimit = Error.stackTraceLimit,
      prepareStackTrace = Error.prepareStackTrace;
  var stackTrace;
  Error.stackTraceLimit = 1 + skip + length;

  Error.prepareStackTrace = function (err, stack) {
    stackTrace = stack;
  };

  new Error().stack;
  Error.stackTraceLimit = stackTraceLimit;
  Error.prepareStackTrace = prepareStackTrace;
  if (!stackTrace) return {
    internal: false,
    trace: ""
  };
  var shortStackTrace = stackTrace.slice(1 + skip, 1 + skip + length);
  return {
    internal: /[\\/]@babel[\\/]/.test(shortStackTrace[1].getFileName()),
    trace: shortStackTrace.map(function (frame) {
      return "    at ".concat(frame);
    }).join("\n")
  };
}